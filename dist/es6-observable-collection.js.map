{"version":3,"sources":["observable-collection.js"],"names":[],"mappingsfile":"es6-observable-collection.js","sourcesContent":["/**\r\n * Created by tzachit on 28/01/15.\r\n */\r\n\r\n(function(angular){\r\n\r\n    'use strict';\r\n\r\n    angular.module('ObservableCollection', [])\r\n        .factory('ObservableCollection', [\r\n            function(){\r\n\r\n                let _collection = Symbol();\r\n                let _onAddListeners = Symbol();\r\n                let _onUpdateListeners = Symbol();\r\n                let _onRemoveListeners = Symbol();\r\n\r\n                class ObservableCollection {\r\n\r\n                    constructor(){\r\n                        this[_collection] = new Map();\r\n                        this[_onAddListeners] = [];\r\n                        this[_onUpdateListeners] = [];\r\n                        this[_onRemoveListeners] = [];\r\n                    }\r\n\r\n                    onAdd(callback){\r\n                        if(!(typeof callback === 'function')){\r\n                            throw new Error('on add callback must be function.');\r\n                        }\r\n\r\n                        this[_onAddListeners].push(callback);\r\n                    }\r\n\r\n                    onUpdate(callback){\r\n                        if(!(typeof callback === 'function')){\r\n                            throw new Error('on update callback must be function.');\r\n                        }\r\n\r\n                        this[_onUpdateListeners].push(callback);\r\n                    }\r\n\r\n                    onRemove(callback){\r\n                        if(!(typeof callback === 'function')){\r\n                            throw new Error('on remove callback must be function.');\r\n                        }\r\n\r\n                        this[_onRemoveListeners].push(callback);\r\n                    }\r\n\r\n                    get(key){\r\n                        return this[_collection].get(key);\r\n                    }\r\n\r\n                    count(){\r\n                        return this[_collection].size;\r\n                    }\r\n\r\n                    exist(key){\r\n                        return this[_collection].has(key);\r\n                    }\r\n\r\n                    keys(){\r\n                        return this[_collection].keys();\r\n                    }\r\n\r\n                    values(){\r\n                        return this[_collection].values();\r\n                    }\r\n\r\n                    clear(){\r\n                        this[_collection].clear();\r\n                    }\r\n\r\n                    toArray(){\r\n                        return [for(n of this[_collection].values()) n];\r\n                    }\r\n\r\n                    [Symbol.iterator](){\r\n                        return this[_collection].entries();\r\n                    }\r\n\r\n                    add(key, value){\r\n                        this[_collection].set(key, value);\r\n                        for(let listener of this[_onAddListeners]){\r\n                            listener(key, value);\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n\r\n                    update(key, value){\r\n                        this[_collection].set(key, value);\r\n                        for(let listener of this[_onUpdateListeners]){\r\n                            listener(key, value);\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n\r\n                    remove(key){\r\n                        let value = this[_collection].get(key);\r\n\r\n                        if(value === undefined){\r\n                            return false;\r\n                        }\r\n\r\n                        if(!this[_collection].delete(key)){\r\n                            return false;\r\n                        }\r\n\r\n                        for(let listener of this[_onRemoveListeners]){\r\n                            listener(key, value);\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return ObservableCollection;\r\n            }\r\n        ]);\r\n\r\n}(window.angular));"],"sourceRoot":"/source/"}